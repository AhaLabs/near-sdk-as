"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassExporter = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const JSONBuilder_1 = require("./JSONBuilder");
const utils_1 = require("./utils");
const toString = visitor_as_1.utils.toString;
class ClassExporter extends visitor_as_1.ClassDecorator {
    constructor() {
        super(...arguments);
        this.sb = [];
    }
    get className() {
        return toString(ClassExporter.classSeen.name);
    }
    visitFieldDeclaration(node) {
        let orgName = node.name.text;
        let type = toString(node.type);
        if (node.is(as_1.CommonFlags.PUBLIC)) {
            node.flags = node.flags ^ as_1.CommonFlags.PUBLIC;
            node.flags = node.flags | as_1.CommonFlags.PRIVATE;
        }
        node.name.text = `__${orgName}`;
        let setter = `
  private set ${orgName}(${orgName}: ${type}) {
    __updated = true;
    this.${node.name.text} = ${orgName};
  }`;
        let getter = `
    private get ${orgName}(): ${type} {
      return this.${node.name.text};
    }`;
        let parent = ClassExporter.classSeen;
        let methods = [setter, getter].map((m) => utils_1.SimpleParser.parseMethodDeclaration(m, parent));
        parent.members.push(...methods);
    }
    visitMethodDeclaration(node) {
        if (node.is(as_1.CommonFlags.SET) || node.is(as_1.CommonFlags.GET)) {
            throw new Error("Exported Singleton class cannot have properties. Found " +
                node.name.text);
        }
        // Private methods should be skipped.
        if (node.is(as_1.CommonFlags.PRIVATE) || !node.is(as_1.CommonFlags.PUBLIC)) {
            return;
        }
        let name = toString(node.name);
        let decorators = (node.decorators || []).map(toString);
        let returnType = toString(node.signature.returnType);
        let origParams = node.signature.parameters.map(visitor_as_1.utils.cloneNode);
        let parameters = origParams.map((param) => {
            if (param.implicitFieldDeclaration) {
                param.name.text = param.name.text.substring(2);
            }
            return toString(param);
        });
        let pramNames = origParams.map((param) => {
            return toString(param.name);
        });
        let isInit = name === "constructor";
        let assertStr = isInit
            ? `assert(isNull(__contract), "contract is already initialized");`
            : `assert(!isNull(__contract), "contract is not initialized");`;
        let isVoid = returnType === "void";
        let body = isInit
            ? `__contract = new ${this.className}(${pramNames.join(", ")});`
            : `${!isVoid ? "let res =  " : ""}__contract.${name}(${pramNames.join(", ")});`;
        if (isInit) {
            name = "init";
            parameters = origParams.map((node) => `${toString(node.name)}: ${toString(node.type)}${node.initializer ? " = " + toString(node.initializer) : ""}`);
            returnType = "void";
        }
        if (isInit) {
            if (!decorators.some((decorator) => decorator.includes("exportAs"))) {
                decorators.push(`@exportAs("new")`);
            }
        }
        this.sb.push(`${decorators.join("\n")}
      export function ${name}(${parameters.join(", ")}): ${returnType} {
  ${assertStr}
  ${body}
  ${isInit ? `__setState(__contract)` : "__updateState(__contract)"};
  ${isVoid || isInit ? "" : "return res"}
}`);
    }
    visitClassDeclaration(node) {
        if (JSONBuilder_1.isEntry(node) && node.is(as_1.CommonFlags.EXPORT)) {
            let name = toString(node.name);
            if (ClassExporter.classSeen) {
                throw new Error(`Cannot export class ${name}. ${ClassExporter.classSeen} already exported. `);
            }
            ClassExporter.classSeen = node;
            this.sb.push(`let __contract: ${name};
if (__checkState()) {
  __contract = __getState<${name}>();
}`);
            this.visit(node.members);
            node.flags = node.flags ^ as_1.CommonFlags.EXPORT;
            let newStatements = utils_1.SimpleParser.parseTopLevel(this.sb.join("\n")).map((n) => {
                if (n instanceof as_1.FunctionDeclaration) {
                    n.flags = n.flags | as_1.CommonFlags.EXPORT;
                    n.flags = n.flags | as_1.CommonFlags.MODULE_EXPORT;
                }
                n.range = node.range;
                return n;
            });
            node.range.source.statements.push(...newStatements);
        }
    }
    get name() {
        return "nearBindgen";
    }
    static visit(source) {
        if (source.sourceKind != as_1.SourceKind.USER_ENTRY) {
            return;
        }
        let visitor = new ClassExporter();
        visitor.visit(source);
    }
}
exports.ClassExporter = ClassExporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3NFeHBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGFzc0V4cG9ydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQVF1QjtBQUN2QiwyQ0FBbUQ7QUFDbkQsK0NBQXdDO0FBQ3hDLG1DQUF1QztBQUV2QyxNQUFNLFFBQVEsR0FBRyxrQkFBSyxDQUFDLFFBQVEsQ0FBQztBQUVoQyxNQUFhLGFBQWMsU0FBUSwyQkFBYztJQUFqRDs7UUFDRSxPQUFFLEdBQWEsRUFBRSxDQUFDO0lBcUlwQixDQUFDO0lBbElDLElBQUksU0FBUztRQUNYLE9BQU8sUUFBUSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELHFCQUFxQixDQUFDLElBQXNCO1FBQzFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzdCLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSyxDQUFDLENBQUM7UUFDaEMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFXLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLGdCQUFXLENBQUMsTUFBTSxDQUFDO1lBQzdDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxnQkFBVyxDQUFDLE9BQU8sQ0FBQztTQUMvQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssT0FBTyxFQUFFLENBQUM7UUFDaEMsSUFBSSxNQUFNLEdBQUc7Z0JBQ0QsT0FBTyxJQUFJLE9BQU8sS0FBSyxJQUFJOztXQUVoQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxPQUFPO0lBQ2xDLENBQUM7UUFDRCxJQUFJLE1BQU0sR0FBRztrQkFDQyxPQUFPLE9BQU8sSUFBSTtvQkFDaEIs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QUFPLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUNsQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Q0FDRjtBQXRJRCxzQ0FzSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDbGFzc0RlY2xhcmF0aW9uLFxuICBGaWVsZERlY2xhcmF0aW9uLFxuICBNZXRob2REZWNsYXJhdGlvbixcbiAgU291cmNlLFxuICBDb21tb25GbGFncyxcbiAgU291cmNlS2luZCxcbiAgRnVuY3Rpb25EZWNsYXJhdGlvbixcbn0gZnJvbSBcInZpc2l0b3ItYXMvYXNcIjtcbmltcG9ydCB7IHV0aWxzLCBDbGFzc0RlY29yYXRvciB9IGZyb20gXCJ2aXNpdG9yLWFzXCI7XG5pbXBvcnQgeyBpc0VudHJ5IH0gZnJvbSBcIi4vSlNPTkJ1aWxkZXJcIjtcbmltcG9ydCB7IFNpbXBsZVBhcnNlciB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmNvbnN0IHRvU3RyaW5nID0gdXRpbHMudG9TdHJpbmc7XG5cbmV4cG9ydCBjbGFzcyBDbGFzc0V4cG9ydGVyIGV4dGVuZHMgQ2xhc3NEZWNvcmF0b3Ige1xuICBzYjogc3RyaW5nW10gPSBbXTtcbiAgc3RhdGljIGNsYXNzU2VlbjogQ2xhc3NEZWNsYXJhdGlvbjtcblxuICBnZXQgY2xhc3NOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRvU3RyaW5nKENsYXNzRXhwb3J0ZXIuY2xhc3NTZWVuLm5hbWUpO1xuICB9XG5cbiAgdmlzaXRGaWVsZERlY2xhcmF0aW9uKG5vZGU6IEZpZWxkRGVjbGFyYXRpb24pOiB2b2lkIHtcbiAgICBsZXQgb3JnTmFtZSA9IG5vZGUubmFtZS50ZXh0O1xuICAgIGxldCB0eXBlID0gdG9TdHJpbmcobm9kZS50eXBlISk7XG4gICAgaWYgKG5vZGUuaXMoQ29tbW9uRmxhZ3MuUFVCTElDKSkge1xuICAgICAgbm9kZS5mbGFncyA9IG5vZGUuZmxhZ3MgXiBDb21tb25GbGFncy5QVUJMSUM7XG4gICAgICBub2RlLmZsYWdzID0gbm9kZS5mbGFncyB8IENvbW1vbkZsYWdzLlBSSVZBVEU7XG4gICAgfVxuICAgIG5vZGUubmFtZS50ZXh0ID0gYF9fJHtvcmdOYW1lfWA7XG4gICAgbGV0IHNldHRlciA9IGBcbiAgcHJpdmF0ZSBzZXQgJHtvcmdOYW1lfSgke29yZ05hbWV9OiAke3R5cGV9KSB7XG4gICAgX191cGRhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLiR7bm9kZS5uYW1lLnRleHR9ID0gJHtvcmdOYW1lfTtcbiAgfWA7XG4gICAgbGV0IGdldHRlciA9IGBcbiAgICBwcml2YXRlIGdldCAke29yZ05hbWV9KCk6ICR7dHlwZX0ge1xuICAgICAgcmV0dXJuIHRoaXMuJHtub2RlLm5hbWUudGV4dH07XG4gICAgfWA7XG4gICAgbGV0IHBhcmVudCA9IENsYXNzRXhwb3J0ZXIuY2xhc3NTZWVuO1xuICAgIGxldCBtZXRob2RzID0gW3NldHRlciwgZ2V0dGVyXS5tYXAoKG0pID0+XG4gICAgICBTaW1wbGVQYXJzZXIucGFyc2VNZXRob2REZWNsYXJhdGlvbihtLCBwYXJlbnQpXG4gICAgKTtcbiAgICBwYXJlbnQubWVtYmVycy5wdXNoKC4uLm1ldGhvZHMpO1xuICB9XG5cbiAgdmlzaXRNZXRob2REZWNsYXJhdGlvbihub2RlOiBNZXRob2REZWNsYXJhdGlvbik6IHZvaWQge1xuICAgIGlmIChub2RlLmlzKENvbW1vbkZsYWdzLlNFVCkgfHwgbm9kZS5pcyhDb21tb25GbGFncy5HRVQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiRXhwb3J0ZWQgU2luZ2xldG9uIGNsYXNzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXMuIEZvdW5kIFwiICtcbiAgICAgICAgICBub2RlLm5hbWUudGV4dFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gUHJpdmF0ZSBtZXRob2RzIHNob3VsZCBiZSBza2lwcGVkLlxuICAgIGlmIChub2RlLmlzKENvbW1vbkZsYWdzLlBSSVZBVEUpIHx8ICFub2RlLmlzKENvbW1vbkZsYWdzLlBVQkxJQykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5hbWUgPSB0b1N0cmluZyhub2RlLm5hbWUpO1xuICAgIGxldCBkZWNvcmF0b3JzID0gKG5vZGUuZGVjb3JhdG9ycyB8fCBbXSkubWFwKHRvU3RyaW5nKTtcbiAgICBsZXQgcmV0dXJuVHlwZSA9IHRvU3RyaW5nKG5vZGUuc2lnbmF0dXJlLnJldHVyblR5cGUpO1xuICAgIGxldCBvcmlnUGFyYW1zID0gbm9kZS5zaWduYXR1cmUucGFyYW1ldGVycy5tYXAodXRpbHMuY2xvbmVOb2RlKTtcbiAgICBsZXQgcGFyYW1ldGVycyA9IG9yaWdQYXJhbXMubWFwKChwYXJhbSkgPT4ge1xuICAgICAgaWYgKHBhcmFtLmltcGxpY2l0RmllbGREZWNsYXJhdGlvbikge1xuICAgICAgICBwYXJhbS5uYW1lLnRleHQgPSBwYXJhbS5uYW1lLnRleHQuc3Vic3RyaW5nKDIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRvU3RyaW5nKHBhcmFtKTtcbiAgICB9KTtcbiAgICBsZXQgcHJhbU5hbWVzID0gb3JpZ1BhcmFtcy5tYXAoKHBhcmFtKSA9PiB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocGFyYW0ubmFtZSk7XG4gICAgfSk7XG4gICAgbGV0IGlzSW5pdCA9IG5hbWUgPT09IFwiY29uc3RydWN0b3JcIjtcbiAgICBsZXQgYXNzZXJ0U3RyID0gaXNJbml0XG4gICAgICA/IGBhc3NlcnQoaXNOdWxsKF9fY29udHJhY3QpLCBcImNvbnRyYWN0IGlzIGFscmVhZHkgaW5pdGlhbGl6ZWRcIik7YFxuICAgICAgOiBgYXNzZXJ0KCFpc051bGwoX19jb250cmFjdCksIFwiY29udHJhY3QgaXMgbm90IGluaXRpYWxpemVkXCIpO2A7XG4gICAgbGV0IGlzVm9pZCA9IHJldHVyblR5cGUgPT09IFwidm9pZFwiO1xuICAgIGxldCBib2R5ID0gaXNJbml0XG4gICAgICA/IGBfX2NvbnRyYWN0ID0gbmV3ICR7dGhpcy5jbGFzc05hbWV9KCR7cHJhbU5hbWVzLmpvaW4oXCIsIFwiKX0pO2BcbiAgICAgIDogYCR7IWlzVm9pZCA/IFwibGV0IHJlcyA9ICBcIiA6IFwiXCJ9X19jb250cmFjdC4ke25hbWV9KCR7cHJhbU5hbWVzLmpvaW4oXG4gICAgICAgICAgXCIsIFwiXG4gICAgICAgICl9KTtgO1xuICAgIGlmIChpc0luaXQpIHtcbiAgICAgIG5hbWUgPSBcImluaXRcIjtcbiAgICAgIHBhcmFtZXRlcnMgPSBvcmlnUGFyYW1zLm1hcChcbiAgICAgICAgKG5vZGUpID0+XG4gICAgICAgICAgYCR7dG9TdHJpbmcobm9kZS5uYW1lKX06ICR7dG9TdHJpbmcobm9kZS50eXBlKX0ke1xuICAgICAgICAgICAgbm9kZS5pbml0aWFsaXplciA/IFwiID0gXCIgKyB0b1N0cmluZyhub2RlLmluaXRpYWxpemVyKSA6IFwiXCJcbiAgICAgICAgICB9YFxuICAgICAgKTtcbiAgICAgIHJldHVyblR5cGUgPSBcInZvaWRcIjtcbiAgICB9XG4gICAgaWYgKGlzSW5pdCkge1xuICAgICAgaWYgKCFkZWNvcmF0b3JzLnNvbWUoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLmluY2x1ZGVzKFwiZXhwb3J0QXNcIikpKSB7XG4gICAgICAgIGRlY29yYXRvcnMucHVzaChgQGV4cG9ydEFzKFwibmV3XCIpYCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc2IucHVzaChcbiAgICAgIGAke2RlY29yYXRvcnMuam9pbihcIlxcblwiKX1cbiAgICAgIGV4cG9ydCBmdW5jdGlvbiAke25hbWV9KCR7cGFyYW1ldGVycy5qb2luKFwiLCBcIil9KTogJHtyZXR1cm5UeXBlfSB7XG4gICR7YXNzZXJ0U3RyfVxuICAke2JvZHl9XG4gICR7aXNJbml0ID8gYF9fc2V0U3RhdGUoX19jb250cmFjdClgIDogXCJfX3VwZGF0ZVN0YXRlKF9fY29udHJhY3QpXCJ9O1xuICAke2lzVm9pZCB8fCBpc0luaXQgPyBcIlwiIDogXCJyZXR1cm4gcmVzXCJ9XG59YFxuICAgICk7XG4gIH1cblxuICB2aXNpdENsYXNzRGVjbGFyYXRpb24obm9kZTogQ2xhc3NEZWNsYXJhdGlvbik6IHZvaWQge1xuICAgIGlmIChpc0VudHJ5KG5vZGUpICYmIG5vZGUuaXMoQ29tbW9uRmxhZ3MuRVhQT1JUKSkge1xuICAgICAgbGV0IG5hbWUgPSB0b1N0cmluZyhub2RlLm5hbWUpO1xuICAgICAgaWYgKENsYXNzRXhwb3J0ZXIuY2xhc3NTZWVuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ2Fubm90IGV4cG9ydCBjbGFzcyAke25hbWV9LiAke0NsYXNzRXhwb3J0ZXIuY2xhc3NTZWVufSBhbHJlYWR5IGV4cG9ydGVkLiBgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBDbGFzc0V4cG9ydGVyLmNsYXNzU2VlbiA9IG5vZGU7XG4gICAgICB0aGlzLnNiLnB1c2goXG4gICAgICAgIGBsZXQgX19jb250cmFjdDogJHtuYW1lfTtcbmlmIChfX2NoZWNrU3RhdGUoKSkge1xuICBfX2NvbnRyYWN0ID0gX19nZXRTdGF0ZTwke25hbWV9PigpO1xufWBcbiAgICAgICk7XG4gICAgICB0aGlzLnZpc2l0KG5vZGUubWVtYmVycyk7XG4gICAgICBub2RlLmZsYWdzID0gbm9kZS5mbGFncyBeIENvbW1vbkZsYWdzLkVYUE9SVDtcbiAgICAgIGxldCBuZXdTdGF0ZW1lbnRzID0gU2ltcGxlUGFyc2VyLnBhcnNlVG9wTGV2ZWwodGhpcy5zYi5qb2luKFwiXFxuXCIpKS5tYXAoXG4gICAgICAgIChuKSA9PiB7XG4gICAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiBGdW5jdGlvbkRlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgICBuLmZsYWdzID0gbi5mbGFncyB8IENvbW1vbkZsYWdzLkVYUE9SVDtcbiAgICAgICAgICAgIG4uZmxhZ3MgPSBuLmZsYWdzIHwgQ29tbW9uRmxhZ3MuTU9EVUxFX0VYUE9SVDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbi5yYW5nZSA9IG5vZGUucmFuZ2U7XG4gICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICBub2RlLnJhbmdlLnNvdXJjZS5zdGF0ZW1lbnRzLnB1c2goLi4ubmV3U3RhdGVtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJuZWFyQmluZGdlblwiO1xuICB9XG5cbiAgc3RhdGljIHZpc2l0KHNvdXJjZTogU291cmNlKTogdm9pZCB7XG4gICAgaWYgKHNvdXJjZS5zb3VyY2VLaW5kICE9IFNvdXJjZUtpbmQuVVNFUl9FTlRSWSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdmlzaXRvciA9IG5ldyBDbGFzc0V4cG9ydGVyKCk7XG4gICAgdmlzaXRvci52aXNpdChzb3VyY2UpO1xuICB9XG59XG4iXX0=