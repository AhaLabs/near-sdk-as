"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassExporter = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const JSONBuilder_1 = require("./JSONBuilder");
const utils_1 = require("./utils");
const toString = visitor_as_1.utils.toString;
class ClassExporter extends visitor_as_1.ClassDecorator {
    constructor() {
        super(...arguments);
        this.sb = [];
    }
    get className() {
        return toString(ClassExporter.classSeen.name);
    }
    visitFieldDeclaration(node) {
        let orgName = node.name.text;
        let type = toString(node.type);
        if (node.is(as_1.CommonFlags.PUBLIC)) {
            node.flags = node.flags ^ as_1.CommonFlags.PUBLIC;
            node.flags = node.flags | as_1.CommonFlags.PRIVATE;
        }
        node.name.text = `__${orgName}`;
        let setter = `
  private set ${orgName}(${orgName}: ${type}) {
    __updated = true;
    this.${node.name.text} = ${orgName};
  }`;
        let getter = `
    private get ${orgName}(): ${type} {
      return this.${node.name.text};
    }`;
        let parent = ClassExporter.classSeen;
        let methods = [setter, getter].map(m => utils_1.SimpleParser.parseMethodDeclaration(m, parent));
        parent.members.push(...methods);
    }
    visitMethodDeclaration(node) {
        if (node.is(as_1.CommonFlags.SET) || node.is(as_1.CommonFlags.GET)) {
            throw new Error("Exported Singleton class cannot have properties. Found " + node.name.text);
        }
        let name = toString(node.name);
        let decorators = (node.decorators || []).map(toString);
        let returnType = toString(node.signature.returnType);
        let origParams = node.signature.parameters.map(visitor_as_1.utils.cloneNode);
        let parameters = origParams.map(param => {
            if (param.implicitFieldDeclaration) {
                param.name.text = param.name.text.substring(2);
            }
            return toString(param);
        });
        let pramNames = origParams.map((param) => {
            return toString(param.name);
        });
        let isInit = name === "constructor";
        let assertStr = isInit
            ? `assert(isNull(__contract), "contract is already initialized");`
            : `assert(!isNull(__contract), "contract is not initialized");`;
        let isVoid = returnType === "void";
        let body = isInit
            ? `__contract = new ${this.className}(${pramNames.join(", ")});`
            : `${!isVoid ? "let res =  " : ""}__contract.${name}(${pramNames.join(", ")});`;
        if (isInit) {
            name = "init";
            parameters = origParams.map((node) => `${toString(node.name)}: ${toString(node.type)}${node.initializer ? " = " + toString(node.initializer) : ""}`);
            returnType = "void";
        }
        if (isInit) {
            if (!decorators.some(decorator => decorator.includes("exportAs"))) {
                decorators.push(`@exportAs("new")`);
            }
        }
        this.sb.push(`${decorators.join("\n")}
      export function ${name}(${parameters.join(", ")}): ${returnType} {
  ${assertStr}
  ${body}
  ${isInit ? `__setState(__contract)` : "__updateState(__contract)"};
  ${isVoid || isInit ? "" : "return res"}
}`);
    }
    visitClassDeclaration(node) {
        if (JSONBuilder_1.isEntry(node) && node.is(as_1.CommonFlags.EXPORT)) {
            let name = toString(node.name);
            if (ClassExporter.classSeen) {
                throw new Error(`Cannot export class ${name}. ${ClassExporter.classSeen} already exported. `);
            }
            ClassExporter.classSeen = node;
            this.sb.push(`let __contract: ${name};
if (__checkState()) {
  __contract = __getState<${name}>();
}`);
            this.visit(node.members);
            node.flags = node.flags ^ as_1.CommonFlags.EXPORT;
            let newStatements = utils_1.SimpleParser.parseTopLevel(this.sb.join("\n")).map(n => {
                if (n instanceof as_1.FunctionDeclaration) {
                    n.flags = n.flags | as_1.CommonFlags.EXPORT;
                    n.flags = n.flags | as_1.CommonFlags.MODULE_EXPORT;
                }
                n.range = node.range;
                return n;
            });
            node.range.source.statements.push(...newStatements);
        }
    }
    get name() {
        return "nearBindgen";
    }
    static visit(source) {
        if (source.sourceKind != as_1.SourceKind.USER_ENTRY) {
            return;
        }
        let visitor = new ClassExporter();
        visitor.visit(source);
    }
}
exports.ClassExporter = ClassExporter;
//# sourceMappingURL=data:application/json;base64,