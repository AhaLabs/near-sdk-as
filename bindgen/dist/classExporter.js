"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassExporter = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const transformRange_1 = require("visitor-as/dist/transformRange");
const common_1 = require("./common");
const utils_1 = require("./utils");
class ClassExporter extends visitor_as_1.ClassDecorator {
    sb = [];
    static classSeen;
    static hasConstructor;
    static get className() {
        return utils_1.toString(ClassExporter.classSeen.name);
    }
    checkMethods(name) {
        let _class = ClassExporter.classSeen;
        _class.members.forEach((member) => {
            if (member instanceof as_1.MethodDeclaration &&
                !member.is(as_1.CommonFlags.PRIVATE)) {
                if (utils_1.toString(member.name) === name) {
                    throw new Error(`Method "${utils_1.toString(member.name)}" already used; cannot export constructor using the same name.`);
                }
            }
        });
    }
    visitFieldDeclaration(node) { }
    visitMethodDeclaration(node) {
        if (node.is(as_1.CommonFlags.SET) || node.is(as_1.CommonFlags.GET)) {
            throw new Error("Exported Singleton class cannot have properties. Found " +
                node.name.text);
        }
        // Private methods should be skipped.
        if (node.is(as_1.CommonFlags.PRIVATE)) {
            return;
        }
        let privateCheck = visitor_as_1.utils.hasDecorator(node, common_1.PRIVATE_DECORATOR)
            ? `__assertPrivate();`
            : "";
        let name = utils_1.toString(node.name);
        let decorators = (node.decorators || []).map(utils_1.toString);
        let returnType = utils_1.toString(node.signature.returnType);
        let origParams = node.signature.parameters.map(visitor_as_1.utils.cloneNode);
        let parameters = origParams.map((param) => {
            if (param.implicitFieldDeclaration) {
                param.name.text = param.name.text.substring(2);
            }
            return utils_1.toString(param);
        });
        let pramNames = origParams.map((param) => {
            return utils_1.toString(param.name);
        });
        let isInit = name === "constructor";
        let assertStr = "";
        if (isInit) {
            assertStr = `assert(isNull(__contract), "contract is already initialized");`;
        }
        else if (ClassExporter.hasConstructor) {
            assertStr = `assert(!isNull(__contract), "contract is not initialized");`;
        }
        let isVoid = returnType === "void";
        let body = isInit
            ? `__contract = new ${ClassExporter.className}(${pramNames.join(", ")});`
            : `${!isVoid ? "let res =  " : ""}__contract.${name}(${pramNames.join(", ")});`;
        if (isInit) {
            name = "init";
            parameters = origParams.map((node) => `${utils_1.toString(node.name)}: ${utils_1.toString(node.type)}${node.initializer ? " = " + utils_1.toString(node.initializer) : ""}`);
            returnType = "void";
        }
        if (isInit) {
            if (!decorators.some((decorator) => decorator.includes("exportAs"))) {
                decorators.push(`@exportAs("new")`);
                this.checkMethods("new");
            }
            else {
                let decorator = node.decorators.find((d) => utils_1.toString(d.name) === "exportAs");
                if (decorator.args.length == 1) {
                    this.checkMethods(utils_1.toString(decorator.args[0]));
                }
            }
        }
        const hasMutateState = decorators.some((decorator) => {
            let res = decorator.includes("mutateState");
            return res;
        });
        this.sb.push(`${decorators.join("\n")}
export function ${name}(${parameters.join(", ")}): ${returnType} {
  ${privateCheck}
  ${assertStr}
  ${body}
  ${isInit || hasMutateState ? `__setState(__contract);` : ""}
  ${isVoid || isInit ? "" : "return res;"}
}`);
    }
    visitClassDeclaration(node) {
        if (node.is(as_1.CommonFlags.EXPORT)) {
            let name = utils_1.toString(node.name);
            if (ClassExporter.classSeen) {
                throw new Error(`Cannot export class ${name}. ${ClassExporter.className} already exported. `);
            }
            ClassExporter.classSeen = node;
            ClassExporter.hasConstructor = node.members.some((member) => {
                if (member instanceof as_1.MethodDeclaration) {
                    return utils_1.toString(member.name) === "constructor";
                }
                return false;
            });
            this.sb.push(`let __contract: ${name};`);
            this.sb.push(`if (__checkState()) {
  __contract = __getState<${name}>();
}${!ClassExporter.hasConstructor
                ? ` else {
  __contract = new ${name}();
}`
                : ""}`);
            this.visit(node.members);
            node.flags = node.flags ^ as_1.CommonFlags.EXPORT;
            // console.log(this.sb.join("\n"));
            let newStatements = this.sb.map(common_1.parseTopLevelStatements).flat().map((s) => transformRange_1.RangeTransform.visit(s, node));
            // console.log(newStatements.map(toString))
            let statements = newStatements.map((n) => {
                if (n instanceof as_1.FunctionDeclaration) {
                    n.flags = n.flags | as_1.CommonFlags.EXPORT;
                    n.flags = n.flags | as_1.CommonFlags.MODULE_EXPORT;
                }
                n.range = node.range;
                return n;
            });
            node.range.source.statements.push(...statements);
            // console.log(toString(node.range.source));
        }
    }
    get name() {
        return "nearBindgen";
    }
    visitSource(node) {
        if (node.sourceKind != as_1.SourceKind.USER_ENTRY) {
            return;
        }
        console.log(node.internalPath);
        super.visitSource(node);
    }
    static visit(sources) {
        let visitor = new ClassExporter();
        visitor.visit(sources);
        return sources;
    }
}
exports.ClassExporter = ClassExporter;
//# sourceMappingURL=data:application/json;base64,