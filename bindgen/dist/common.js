"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTopLevelStatements = exports.numOfParameters = exports.returnsVoid = exports.createEncodeStatements = exports.createDecodeStatement = exports.createDecodeStatements = exports.nearFiles = exports.isPayable = exports.isEncodable = exports.isStatic = exports.isField = exports.isClass = exports.isEntry = exports.hasNearDecorator = exports.WRAPPER_PREFIX = exports.PRIVATE_DECORATOR = exports.NEAR_DECORATOR = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
exports.NEAR_DECORATOR = "nearBindgen";
exports.PRIVATE_DECORATOR = "contractPrivate";
exports.WRAPPER_PREFIX = "__wrapper_";
function hasNearDecorator(stmt) {
    return ((isEntry(stmt) ||
        stmt.text.includes("@nearfile") ||
        stmt.statements.some((s) => s instanceof as_1.DeclarationStatement &&
            visitor_as_1.utils.hasDecorator(s, exports.NEAR_DECORATOR))) &&
        !stmt.text.includes("@notNearfile"));
}
exports.hasNearDecorator = hasNearDecorator;
function isEntry(source) {
    return source.range.source.sourceKind == as_1.SourceKind.USER_ENTRY;
}
exports.isEntry = isEntry;
function isClass(type) {
    return type.kind == as_1.NodeKind.CLASSDECLARATION;
}
exports.isClass = isClass;
function isField(mem) {
    return mem.kind == as_1.NodeKind.FIELDDECLARATION;
}
exports.isField = isField;
function isStatic(mem) {
    return mem.is(as_1.CommonFlags.STATIC);
}
exports.isStatic = isStatic;
function isEncodable(mem) {
    return isField(mem) && !isStatic(mem);
}
exports.isEncodable = isEncodable;
function isPayable(func) {
    return (func.decorators != null &&
        func.decorators.some((s) => visitor_as_1.utils.toString(s.name) != "payable"));
}
exports.isPayable = isPayable;
function nearFiles(sources) {
    return sources.filter(hasNearDecorator);
}
exports.nearFiles = nearFiles;
function createDecodeStatements(_class) {
    return _class.members
        .filter(isEncodable)
        .map((field) => {
        const name = visitor_as_1.utils.toString(field.name);
        return (createDecodeStatement(field, `this.${name} = obj.has("${name}") ? `) +
            `: ${field.initializer != null
                ? visitor_as_1.utils.toString(field.initializer)
                : `this.${name}`};`);
    });
}
exports.createDecodeStatements = createDecodeStatements;
function createDecodeStatement(field, setterPrefix = "") {
    let T = visitor_as_1.utils.toString(field.type);
    let name = visitor_as_1.utils.toString(field.name);
    return `${setterPrefix}decode<${T}, JSON.Obj>(obj, "${name}")`;
}
exports.createDecodeStatement = createDecodeStatement;
function createEncodeStatements(_class) {
    return _class.members
        .filter(isEncodable)
        .map((field) => {
        let T = visitor_as_1.utils.toString(field.type);
        let name = visitor_as_1.utils.toString(field.name);
        return `encode<${T}, JSONEncoder>(this.${name}, "${name}", encoder);`;
    });
}
exports.createEncodeStatements = createEncodeStatements;
function returnsVoid(node) {
    return visitor_as_1.utils.toString(node.signature.returnType) === "void";
}
exports.returnsVoid = returnsVoid;
function numOfParameters(node) {
    return node.signature.parameters.length;
}
exports.numOfParameters = numOfParameters;
function parseTopLevelStatements(sourceCode) {
    const block = visitor_as_1.SimpleParser.parseStatement(sourceCode, true);
    console.log(`BLOCK: 
    ${visitor_as_1.utils.toString(block)}`);
    if (block instanceof as_1.BlockStatement) {
        return block.statements;
    }
    return [block];
}
exports.parseTopLevelStatements = parseTopLevelStatements;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FhdUI7QUFFdkIsMkNBQWdEO0FBRW5DLFFBQUEsY0FBYyxHQUFHLGFBQWEsQ0FBQztBQUMvQixRQUFBLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0FBQ3RDLFFBQUEsY0FBYyxHQUFHLFlBQVksQ0FBQztBQUUzQyxTQUFnQixnQkFBZ0IsQ0FBQyxJQUFZO0lBQzNDLE9BQU8sQ0FDTCxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ2xCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDSixDQUFDLFlBQVkseUJBQW9CO1lBQ2pDLGtCQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxzQkFBYyxDQUFDLENBQ3hDLENBQUM7UUFDSixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUNwQyxDQUFDO0FBQ0osQ0FBQztBQVhELDRDQVdDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLE1BQXFCO0lBQzNDLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLGVBQVUsQ0FBQyxVQUFVLENBQUM7QUFDakUsQ0FBQztBQUZELDBCQUVDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLElBQVU7SUFDaEMsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLGFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztBQUNoRCxDQUFDO0FBRkQsMEJBRUM7QUFFRCxTQUFnQixPQUFPLENBQUMsR0FBeUI7SUFDL0MsT0FBTyxHQUFHLENBQUMsSUFBSSxJQUFJLGFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztBQUMvQyxDQUFDO0FBRkQsMEJBRUM7QUFFRCxTQUFnQixRQUFR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dUJBQXVCLENBQUMsVUFBa0I7SUFDdEQsTUFBTSxLQUFLLEdBQUcseUJBQVksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUM7TUFDVixrQkFBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekIsSUFBSSxLQUFLLFlBQVksbUJBQWMsRUFBRTtRQUNuQyxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUM7S0FDekI7SUFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckIsQ0FBQztBQVJELDBEQVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tbW9uRmxhZ3MsXG4gIERlY2xhcmF0aW9uU3RhdGVtZW50LFxuICBGdW5jdGlvbkRlY2xhcmF0aW9uLFxuICBOb2RlS2luZCxcbiAgU291cmNlLFxuICBTb3VyY2VLaW5kLFxuICBOb2RlLFxuICBDbGFzc0RlY2xhcmF0aW9uLFxuICBGaWVsZERlY2xhcmF0aW9uLFxuICBQYXJhbWV0ZXJOb2RlLFxuICBTdGF0ZW1lbnQsXG4gIEJsb2NrU3RhdGVtZW50XG59IGZyb20gXCJ2aXNpdG9yLWFzL2FzXCI7XG5cbmltcG9ydCB7IFNpbXBsZVBhcnNlciwgdXRpbHMgfSBmcm9tIFwidmlzaXRvci1hc1wiXG5cbmV4cG9ydCBjb25zdCBORUFSX0RFQ09SQVRPUiA9IFwibmVhckJpbmRnZW5cIjtcbmV4cG9ydCBjb25zdCBQUklWQVRFX0RFQ09SQVRPUiA9IFwiY29udHJhY3RQcml2YXRlXCI7XG5leHBvcnQgY29uc3QgV1JBUFBFUl9QUkVGSVggPSBcIl9fd3JhcHBlcl9cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc05lYXJEZWNvcmF0b3Ioc3RtdDogU291cmNlKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgKGlzRW50cnkoc3RtdCkgfHxcbiAgICAgIHN0bXQudGV4dC5pbmNsdWRlcyhcIkBuZWFyZmlsZVwiKSB8fFxuICAgICAgc3RtdC5zdGF0ZW1lbnRzLnNvbWUoXG4gICAgICAgIChzKSA9PlxuICAgICAgICAgIHMgaW5zdGFuY2VvZiBEZWNsYXJhdGlvblN0YXRlbWVudCAmJlxuICAgICAgICAgIHV0aWxzLmhhc0RlY29yYXRvcihzLCBORUFSX0RFQ09SQVRPUilcbiAgICAgICkpICYmXG4gICAgIXN0bXQudGV4dC5pbmNsdWRlcyhcIkBub3ROZWFyZmlsZVwiKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbnRyeShzb3VyY2U6IFNvdXJjZSB8IE5vZGUpOiBib29sZWFuIHtcbiAgcmV0dXJuIHNvdXJjZS5yYW5nZS5zb3VyY2Uuc291cmNlS2luZCA9PSBTb3VyY2VLaW5kLlVTRVJfRU5UUlk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NsYXNzKHR5cGU6IE5vZGUpOiBib29sZWFuIHtcbiAgcmV0dXJuIHR5cGUua2luZCA9PSBOb2RlS2luZC5DTEFTU0RFQ0xBUkFUSU9OO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGaWVsZChtZW06IERlY2xhcmF0aW9uU3RhdGVtZW50KSB7XG4gIHJldHVybiBtZW0ua2luZCA9PSBOb2RlS2luZC5GSUVMRERFQ0xBUkFUSU9OO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdGF0aWMobWVtOiBEZWNsYXJhdGlvblN0YXRlbWVudCkge1xuICByZXR1cm4gbWVtLmlzKENvbW1vbkZsYWdzLlNUQVRJQyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VuY29kYWJsZShtZW06IERlY2xhcmF0aW9uU3RhdGVtZW50KSB7XG4gIHJldHVybiBpc0ZpZWxkKG1lbSkgJiYgIWlzU3RhdGljKG1lbSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BheWFibGUoZnVuYzogRnVuY3Rpb25EZWNsYXJhdGlvbik6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIGZ1bmMuZGVjb3JhdG9ycyAhPSBudWxsICYmXG4gICAgZnVuYy5kZWNvcmF0b3JzLnNvbWUoKHMpID0+IHV0aWxzLnRvU3RyaW5nKHMubmFtZSkgIT0gXCJwYXlhYmxlXCIpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZWFyRmlsZXMoc291cmNlczogU291cmNlW10pOiBTb3VyY2VbXSB7XG4gICAgcmV0dXJuIHNvdXJjZXMuZmlsdGVyKGhhc05lYXJEZWNvcmF0b3IpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVjb2RlU3RhdGVtZW50cyhfY2xhc3M6IENsYXNzRGVjbGFyYXRpb24pOiBzdHJpbmdbXSB7XG4gIHJldHVybiBfY2xhc3MubWVtYmVyc1xuICAgIC5maWx0ZXIoaXNFbmNvZGFibGUpXG4gICAgLm1hcCgoZmllbGQ6IEZpZWxkRGVjbGFyYXRpb24pOiBzdHJpbmcgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IHV0aWxzLnRvU3RyaW5nKGZpZWxkLm5hbWUpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlRGVjb2RlU3RhdGVtZW50KGZpZWxkLCBgdGhpcy4ke25hbWV9ID0gb2JqLmhhcyhcIiR7bmFtZX1cIikgPyBgKSArXG4gICAgICAgIGA6ICR7XG4gICAgICAgICAgZmllbGQuaW5pdGlhbGl6ZXIgIT0gbnVsbFxuICAgICAgICAgICAgPyB1dGlscy50b1N0cmluZyhmaWVsZC5pbml0aWFsaXplcilcbiAgICAgICAgICAgIDogYHRoaXMuJHtuYW1lfWBcbiAgICAgICAgfTtgXG4gICAgICApO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVjb2RlU3RhdGVtZW50KFxuICBmaWVsZDogRmllbGREZWNsYXJhdGlvbiB8IFBhcmFtZXRlck5vZGUsXG4gIHNldHRlclByZWZpeCA9IFwiXCJcbik6IHN0cmluZyB7XG4gIGxldCBUID0gdXRpbHMudG9TdHJpbmcoZmllbGQudHlwZSEpO1xuICBsZXQgbmFtZSA9IHV0aWxzLnRvU3RyaW5nKGZpZWxkLm5hbWUpO1xuICByZXR1cm4gYCR7c2V0dGVyUHJlZml4fWRlY29kZTwke1R9LCBKU09OLk9iaj4ob2JqLCBcIiR7bmFtZX1cIilgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW5jb2RlU3RhdGVtZW50cyhfY2xhc3M6IENsYXNzRGVjbGFyYXRpb24pOiBzdHJpbmdbXSB7XG4gIHJldHVybiBfY2xhc3MubWVtYmVyc1xuICAgIC5maWx0ZXIoaXNFbmNvZGFibGUpXG4gICAgLm1hcCgoZmllbGQ6IEZpZWxkRGVjbGFyYXRpb24pOiBzdHJpbmcgPT4ge1xuICAgICAgbGV0IFQgPSB1dGlscy50b1N0cmluZyhmaWVsZC50eXBlISk7XG4gICAgICBsZXQgbmFtZSA9IHV0aWxzLnRvU3RyaW5nKGZpZWxkLm5hbWUpO1xuICAgICAgcmV0dXJuIGBlbmNvZGU8JHtUfSwgSlNPTkVuY29kZXI+KHRoaXMuJHtuYW1lfSwgXCIke25hbWV9XCIsIGVuY29kZXIpO2A7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXR1cm5zVm9pZChub2RlOiBGdW5jdGlvbkRlY2xhcmF0aW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiB1dGlscy50b1N0cmluZyhub2RlLnNpZ25hdHVyZS5yZXR1cm5UeXBlKSA9PT0gXCJ2b2lkXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudW1PZlBhcmFtZXRlcnMobm9kZTogRnVuY3Rpb25EZWNsYXJhdGlvbik6IG51bWJlciB7XG4gIHJldHVybiBub2RlLnNpZ25hdHVyZS5wYXJhbWV0ZXJzLmxlbmd0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVG9wTGV2ZWxTdGF0ZW1lbnRzKHNvdXJjZUNvZGU6IHN0cmluZyk6IFN0YXRlbWVudFtdIHtcbiAgICBjb25zdCBibG9jayA9IFNpbXBsZVBhcnNlci5wYXJzZVN0YXRlbWVudChzb3VyY2VDb2RlLCB0cnVlKTtcbiAgICBjb25zb2xlLmxvZyhgQkxPQ0s6IFxuICAgICR7dXRpbHMudG9TdHJpbmcoYmxvY2spfWApO1xuICAgICAgaWYoIGJsb2NrIGluc3RhbmNlb2YgQmxvY2tTdGF0ZW1lbnQpIHsgXG4gICAgICAgIHJldHVybiBibG9jay5zdGF0ZW1lbnRzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtibG9ja107XG59Il19