"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTopLevelStatements = exports.numOfParameters = exports.returnsVoid = exports.createEncodeStatements = exports.createDecodeStatement = exports.createDecodeStatements = exports.nearFiles = exports.isPayable = exports.isEncodable = exports.isStatic = exports.isField = exports.isClass = exports.isEntry = exports.hasNearDecorator = exports.WRAPPER_PREFIX = exports.PRIVATE_DECORATOR = exports.NEAR_DECORATOR = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
exports.NEAR_DECORATOR = "nearBindgen";
exports.PRIVATE_DECORATOR = "contractPrivate";
exports.WRAPPER_PREFIX = "__wrapper_";
function hasNearDecorator(stmt) {
    return ((isEntry(stmt) ||
        stmt.text.includes("@nearfile") ||
        stmt.statements.some((s) => s instanceof as_1.DeclarationStatement &&
            visitor_as_1.utils.hasDecorator(s, exports.NEAR_DECORATOR))) &&
        !stmt.text.includes("@notNearfile"));
}
exports.hasNearDecorator = hasNearDecorator;
function isEntry(source) {
    return source.range.source.sourceKind == as_1.SourceKind.USER_ENTRY;
}
exports.isEntry = isEntry;
function isClass(type) {
    return type.kind == as_1.NodeKind.CLASSDECLARATION;
}
exports.isClass = isClass;
function isField(mem) {
    return mem.kind == as_1.NodeKind.FIELDDECLARATION;
}
exports.isField = isField;
function isStatic(mem) {
    return mem.is(as_1.CommonFlags.STATIC);
}
exports.isStatic = isStatic;
function isEncodable(mem) {
    return isField(mem) && !isStatic(mem);
}
exports.isEncodable = isEncodable;
function isPayable(func) {
    return (func.decorators != null &&
        func.decorators.some((s) => visitor_as_1.utils.toString(s.name) != "payable"));
}
exports.isPayable = isPayable;
function nearFiles(sources) {
    return sources.filter(hasNearDecorator);
}
exports.nearFiles = nearFiles;
function createDecodeStatements(_class) {
    return _class.members
        .filter(isEncodable)
        .map((field) => {
        const name = visitor_as_1.utils.toString(field.name);
        return (createDecodeStatement(field, `this.${name} = obj.has("${name}") ? `) +
            `: ${field.initializer != null
                ? visitor_as_1.utils.toString(field.initializer)
                : `this.${name}`};`);
    });
}
exports.createDecodeStatements = createDecodeStatements;
function createDecodeStatement(field, setterPrefix = "") {
    let T = visitor_as_1.utils.toString(field.type);
    let name = visitor_as_1.utils.toString(field.name);
    return `${setterPrefix}decode<${T}, JSON.Obj>(obj, "${name}")`;
}
exports.createDecodeStatement = createDecodeStatement;
function createEncodeStatements(_class) {
    return _class.members
        .filter(isEncodable)
        .map((field) => {
        let T = visitor_as_1.utils.toString(field.type);
        let name = visitor_as_1.utils.toString(field.name);
        return `encode<${T}, JSONEncoder>(this.${name}, "${name}", encoder);`;
    });
}
exports.createEncodeStatements = createEncodeStatements;
function returnsVoid(node) {
    return visitor_as_1.utils.toString(node.signature.returnType) === "void";
}
exports.returnsVoid = returnsVoid;
function numOfParameters(node) {
    return node.signature.parameters.length;
}
exports.numOfParameters = numOfParameters;
function parseTopLevelStatements(sourceCode) {
    const block = visitor_as_1.SimpleParser.parseTopLevelStatement(sourceCode);
    if (block instanceof as_1.BlockStatement) {
        return block.statements;
    }
    return [block];
}
exports.parseTopLevelStatements = parseTopLevelStatements;
//# sourceMappingURL=data:application/json;base64,