"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionExportWrapper = exports.FunctionClass = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const common_1 = require("./common");
const utils_1 = require("./utils");
const transformRange_1 = require("visitor-as/dist/transformRange");
class FunctionClass extends visitor_as_1.BaseVisitor {
    _class;
    visitFunctionDeclaration(node) {
        let name = utils_1.getName(node);
        let fields = node.signature.parameters.map((p) => `${utils_1.toString(p.name)}: ${utils_1.getName(p.type)}`);
        let params = node.signature.parameters.map((p) => `this.${utils_1.getName(p)}`);
        if (fields.length > 0) {
            // add blank to make join add ;
            fields.push("");
        }
        const fieldStrs = fields.join(";\n");
        let _classStr = `class ${name}__class {
  ${fieldStrs}
  call(): ${utils_1.getName(node.signature.returnType)} {
    ${common_1.returnsVoid(node) ? "" : "return "}${name}(${params.join(",")});
  }
}`;
        let _class = (visitor_as_1.SimpleParser.parseTopLevelStatement(_classStr));
        // MethodInjector.visit(_class);
        this._class = _class;
    }
    static visit(node) {
        const funcClass = new FunctionClass();
        funcClass.visit(node);
        return funcClass._class;
    }
}
exports.FunctionClass = FunctionClass;
function emptySignature(node) {
    return common_1.numOfParameters(node) == 0 && common_1.returnsVoid(node);
}
class FunctionExportWrapper extends visitor_as_1.BaseVisitor {
    static isTest = false;
    functions = [];
    exports = [];
    wrappedFuncs = new Set();
    classWrappers = [];
    static checkTestBuild(sources) {
        this.isTest = sources.some((s) => s.normalizedPath.includes(".spec."));
    }
    needsWrapper(node) {
        let isExport = node.is(as_1.CommonFlags.EXPORT);
        let alreadyWrapped = this.wrappedFuncs.has(utils_1.toString(node.name));
        let noInputOrOutput = emptySignature(node);
        if (!isExport ||
            alreadyWrapped ||
            noInputOrOutput ||
            FunctionExportWrapper.isTest)
            return false;
        return common_1.isEntry(node) || visitor_as_1.utils.hasDecorator(node, common_1.NEAR_DECORATOR);
    }
    visitFunctionDeclaration(node) {
        const name = utils_1.toString(node.name);
        if (!this.needsWrapper(node)) {
            if ((common_1.isEntry(node) || visitor_as_1.utils.hasDecorator(node, common_1.NEAR_DECORATOR)) &&
                !this.wrappedFuncs.has(name) &&
                node.is(as_1.CommonFlags.EXPORT)) {
                const snakeCase = this.camelCaseToSnakeCaseExport(name, "");
                this.wrappedFuncs.add(name);
                if (snakeCase) {
                    this.exports.push(snakeCase);
                }
            }
            super.visitFunctionDeclaration(node);
            return;
        }
        if (common_1.numOfParameters(node) > 0) {
            const _class = FunctionClass.visit(node);
            transformRange_1.RangeTransform.visit(_class, node);
            this.classWrappers.push(_class);
        }
        this.functions.push(common_1.parseTopLevelStatements(this.generateWrapperFunction(node))[0]);
        // Change function to not be an export
        node.flags = node.flags ^ as_1.CommonFlags.EXPORT;
        this.wrappedFuncs.add(name);
    }
    camelCaseToSnakeCaseExport(name, prefix = common_1.WRAPPER_PREFIX) {
        let s = utils_1.makeSnakeCase(name);
        if (s.normalize() === name.normalize()) {
            return "";
        }
        return `export { ${prefix + name} as ${s} }`;
    }
    /*
    Create a wrapper function that will be export in the function's place.
    */
    generateWrapperFunction(func) {
        let funcSource = [];
        let signature = func.signature;
        let params = signature.parameters;
        let returnType = signature.returnType;
        let returnTypeName = utils_1.toString(returnType);
        let name = utils_1.getName(func);
        if (func.decorators && func.decorators.length > 0) {
            funcSource.push(func.decorators.map((decorator) => utils_1.toString(decorator)).join("\n"));
        }
        const className = name + "__class";
        funcSource.push(`
    function __wrapper_${name}(): void {`);
        if (params.length > 0) {
            funcSource.push(`  const _class = JSON.parse<${className}>(getInputString())`);
        }
        if (returnTypeName !== "void") {
            if (params.length > 0) {
                funcSource.push(`let result: ${returnTypeName} = _class.call();`);
            }
            else {
                funcSource.push(`let result: ${returnTypeName} = ${name}();`);
            }
            funcSource.push(`
      const val = String.UTF8.encode(JSON.stringify(result));
      value_return(val.byteLength, changetype<usize>(val));
  `);
        }
        else {
            if (params.length > 0) {
                funcSource.push(`_class.call()`);
            }
            else {
                funcSource.push(`${name}();`);
            }
        }
        funcSource.push(`}`);
        this.addExport(name);
        return funcSource.join("\n");
    }
    addExport(name) {
        this.exports.push(`export {${common_1.WRAPPER_PREFIX + name} as ${name}}`);
        let res = this.camelCaseToSnakeCaseExport(name, common_1.WRAPPER_PREFIX);
        if (res) {
            this.exports.push(res);
        }
    }
    visitSource(node) {
        super.visitSource(node);
        const newParser = new as_1.Parser();
        const lastStatement = (node.statements.length && node.statements[node.statements.length - 1]) ||
            node;
        if (this.functions.length > 0) {
            node.statements.push(...this.functions.map((n) => transformRange_1.RangeTransform.visit(n, lastStatement)));
            const str = this.exports.join("\n");
            newParser.parseFile(str, node.normalizedPath, common_1.isEntry(node));
            const exportsSource = newParser.sources[0];
            node.statements = node.statements.concat(exportsSource.statements);
            node.statements.push(...this.classWrappers);
        }
    }
    static visit(sources) {
        FunctionExportWrapper.checkTestBuild(sources);
        sources.forEach((s) => {
            new FunctionExportWrapper().visit(s);
        });
    }
}
exports.FunctionExportWrapper = FunctionExportWrapper;
//# sourceMappingURL=data:application/json;base64,