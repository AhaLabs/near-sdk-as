"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionExportWrapper = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const common_1 = require("./common");
const utils_1 = require("./utils");
const transformRange_1 = require("visitor-as/dist/transformRange");
class FunctionExportWrapper extends visitor_as_1.BaseVisitor {
    constructor() {
        super(...arguments);
        this.functions = [];
        this.exports = [];
        this.wrappedFuncs = new Set();
    }
    static checkTestBuild(sources) {
        this.isTest = sources.some((s) => s.normalizedPath.includes(".spec."));
    }
    needsWrapper(node) {
        let isExport = node.is(as_1.CommonFlags.EXPORT);
        let alreadyWrapped = this.wrappedFuncs.has(utils_1.toString(node.name));
        let noInputOrOutput = common_1.numOfParameters(node) == 0 && common_1.returnsVoid(node);
        if (!isExport ||
            alreadyWrapped ||
            noInputOrOutput ||
            FunctionExportWrapper.isTest)
            return false;
        return common_1.isEntry(node) || visitor_as_1.utils.hasDecorator(node, common_1.NEAR_DECORATOR);
    }
    visitFunctionDeclaration(node) {
        const name = utils_1.getName(node);
        if (!this.needsWrapper(node)) {
            if ((common_1.isEntry(node) || visitor_as_1.utils.hasDecorator(node, common_1.NEAR_DECORATOR)) &&
                !this.wrappedFuncs.has(name) &&
                node.is(as_1.CommonFlags.EXPORT)) {
                this.exports.push(this.camelCaseToSnakeCaseExport(name, ""));
                this.wrappedFuncs.add(name);
            }
            super.visitFunctionDeclaration(node);
            return;
        }
        this.functions.push(common_1.parseTopLevelStatements(this.generateWrapperFunction(node))[0]);
        console.log(visitor_as_1.utils.toString(this.functions[this.functions.length - 1]));
        // Change function to not be an export
        node.flags = node.flags ^ as_1.CommonFlags.EXPORT;
        this.wrappedFuncs.add(name);
    }
    camelCaseToSnakeCaseExport(name, prefix = common_1.WRAPPER_PREFIX) {
        let s = utils_1.makeSnakeCase(name);
        if (s.normalize() === name.normalize()) {
            return "";
        }
        return `export { ${prefix + name} as ${s} }`;
    }
    /*
    Create a wrapper function that will be export in the function's place.
    */
    generateWrapperFunction(func) {
        let funcSource = [];
        let signature = func.signature;
        let params = signature.parameters;
        let returnType = signature.returnType;
        let returnTypeName = utils_1.toString(returnType);
        let returnTypeNameNoNull = returnTypeName
            .split("|")
            .map((name) => name.trim())
            .filter((name) => name !== "null")
            .join("");
        let hasNull = returnTypeName.includes("null");
        let name = utils_1.getName(func);
        if (func.decorators && func.decorators.length > 0) {
            funcSource.push(func.decorators.map((decorator) => utils_1.toString(decorator)).join("\n"));
        }
        funcSource.push(`function __wrapper_${name}(): void {`);
        if (params.length > 0) {
            funcSource.push(`  const obj = getInput();`);
        }
        if (returnTypeName !== "void") {
            funcSource.push(`  let result: ${returnTypeName} = ${name}(`);
        }
        else {
            funcSource.push(`  ${name}(`);
        }
        if (params.length > 0) {
            funcSource[funcSource.length - 1] += params
                .map((param) => {
                let name = utils_1.toString(param.name);
                let type = utils_1.toString(param.type);
                let res = `obj.has('${name}') ?
             ${common_1.createDecodeStatement(param)} : ${param.initializer
                    ? utils_1.toString(param.initializer)
                    : `requireParameter<${type}>("${name}")`}`;
                return res;
            })
                .join(",\n    ");
        }
        funcSource[funcSource.length - 1] += ");";
        if (returnTypeName !== "void") {
            funcSource.push(`  const val = encode<${returnTypeNameNoNull}>(${hasNull ? `changetype<${returnTypeNameNoNull}>(result)` : "result"});
  value_return(val.byteLength, val.dataStart);
  `);
        }
        funcSource.push(`}`);
        this.exports.push(`
export { ${common_1.WRAPPER_PREFIX + name} as ${name} }
${this.camelCaseToSnakeCaseExport(name)}
`);
        return funcSource.join("\n");
    }
    visitSource(node) {
        this.functions = [];
        this.exports = [];
        // console.log(this.functions.join("\n"))
        console.log(this.exports.join("\n"));
        super.visitSource(node);
        // const newCode = this.functions.join("\n")
        if (this.functions) {
            node.statements.push(...(this.functions.map((n) => transformRange_1.RangeTransform.visit(n, node))));
        }
    }
    static visit(sources) {
        FunctionExportWrapper.checkTestBuild(sources);
        (new FunctionExportWrapper()).visit(sources);
    }
}
exports.FunctionExportWrapper = FunctionExportWrapper;
FunctionExportWrapper.isTest = false;
//# sourceMappingURL=data:application/json;base64,