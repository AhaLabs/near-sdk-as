"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toString = exports.posixRelativePath = exports.SimpleParser = void 0;
//@ts-ignore
let path = require("path");
const as_1 = require("visitor-as/as");
class SimpleParser {
    static getTokenizer(s) {
        return new as_1.Tokenizer(new as_1.Source(as_1.SourceKind.USER, "index.ts", s));
    }
    static parseExpression(s) {
        let res = this.parser.parseExpression(this.getTokenizer(s));
        if (res == null) {
            throw new Error("Failed to parse the expression: '" + s + "'");
        }
        return res;
    }
    static parseStatement(s, topLevel = false) {
        let res = this.parser.parseStatement(this.getTokenizer(s), topLevel);
        if (res == null) {
            throw new Error("Failed to parse the expression: '" + s + "'");
        }
        return res;
    }
    static parseTopLevel(s) {
        let tn = this.getTokenizer(s);
        let statements = [];
        while (!tn.skip(as_1.Token.ENDOFFILE)) {
            let statement = this.parser.parseTopLevelStatement(tn);
            if (statement) {
                statements.push(statement);
            }
            else {
                this.parser.skipStatement(tn);
            }
        }
        return statements;
    }
    static parseMethodDeclaration(s, parent) {
        let tn = this.getTokenizer(s);
        let res = this.parser.parseClassMember(tn, parent);
        if (res == null) {
            throw new Error("Failed to parse class member: '" + s + "'");
        }
        if (!(res instanceof as_1.MethodDeclaration)) {
            throw new Error("'" + s + "' is not a method declaration");
        }
        return res;
    }
}
exports.SimpleParser = SimpleParser;
SimpleParser.parser = new as_1.Parser();
function posixRelativePath(from, to) {
    const relativePath = path.relative(from, to);
    return relativePath.split(path.sep).join(path.posix.sep);
}
exports.posixRelativePath = posixRelativePath;
function toString(node) {
    return as_1.ASTBuilder.build(node);
}
exports.toString = toString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsWUFBWTtBQUNaLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUUzQixzQ0FZdUI7QUFFdkIsTUFBYSxZQUFZO0lBR2YsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFTO1FBQ25DLE9BQU8sSUFBSSxjQUFTLENBQUMsSUFBSSxXQUFNLENBQUMsZUFBVSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFTO1FBQzlCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUNoRTtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBUyxFQUFFLFdBQW9CLEtBQUs7UUFDeEQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyRSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUNoRTtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBUztRQUM1QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLElBQUksVUFBVSxHQUFnQixFQUFFLENBQUM7UUFDakMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ2hDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkQsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUM1QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUMvQjtTQUNGO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFTLEVBQUUsTUFBd0I7UUFDL0QsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNuRCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUM5RDtRQUNELElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxzQkFBaUIsQ0FBQyxFQUFFO1lBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRywrQkFBK0IsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOztBQS9DSCxvQ0FpREM7QUFoRGdCLG1CQUFNLEdBQUcsSUFBSSxXQUFNLEVBQUUsQ0FBQztBQW1EdkMsU0FBZ0IsaUJBQWlCLENBQUMsSUFBWSxFQUFFLEVBQVU7SUFDeEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0MsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBSEQsOENBR0M7QUFFRCxTQUFnQixRQUFRLENBQUMsSUFBVTtJQUNqQyxPQUFPLGVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUZELDRCQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLy9AdHMtaWdub3JlXG5sZXQgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG5pbXBvcnQge1xuICBUb2tlbixcbiAgRXhwcmVzc2lvbixcbiAgVG9rZW5pemVyLFxuICBQYXJzZXIsXG4gIFNvdXJjZSxcbiAgU291cmNlS2luZCxcbiAgU3RhdGVtZW50LFxuICBBU1RCdWlsZGVyLFxuICBOb2RlLFxuICBNZXRob2REZWNsYXJhdGlvbixcbiAgQ2xhc3NEZWNsYXJhdGlvbixcbn0gZnJvbSBcInZpc2l0b3ItYXMvYXNcIjtcblxuZXhwb3J0IGNsYXNzIFNpbXBsZVBhcnNlciB7XG4gIHByaXZhdGUgc3RhdGljIHBhcnNlciA9IG5ldyBQYXJzZXIoKTtcblxuICBwcml2YXRlIHN0YXRpYyBnZXRUb2tlbml6ZXIoczogc3RyaW5nKTogVG9rZW5pemVyIHtcbiAgICByZXR1cm4gbmV3IFRva2VuaXplcihuZXcgU291cmNlKFNvdXJjZUtpbmQuVVNFUiwgXCJpbmRleC50c1wiLCBzKSk7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VFeHByZXNzaW9uKHM6IHN0cmluZyk6IEV4cHJlc3Npb24ge1xuICAgIGxldCByZXMgPSB0aGlzLnBhcnNlci5wYXJzZUV4cHJlc3Npb24odGhpcy5nZXRUb2tlbml6ZXIocykpO1xuICAgIGlmIChyZXMgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIHRoZSBleHByZXNzaW9uOiAnXCIgKyBzICsgXCInXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlU3RhdGVtZW50KHM6IHN0cmluZywgdG9wTGV2ZWw6IGJvb2xlYW4gPSBmYWxzZSk6IFN0YXRlbWVudCB7XG4gICAgbGV0IHJlcyA9IHRoaXMucGFyc2VyLnBhcnNlU3RhdGVtZW50KHRoaXMuZ2V0VG9rZW5pemVyKHMpLCB0b3BMZXZlbCk7XG4gICAgaWYgKHJlcyA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgdGhlIGV4cHJlc3Npb246ICdcIiArIHMgKyBcIidcIik7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VUb3BMZXZlbChzOiBzdHJpbmcpOiBTdGF0ZW1lbnRbXSB7XG4gICAgbGV0IHRuID0gdGhpcy5nZXRUb2tlbml6ZXIocyk7XG4gICAgbGV0IHN0YXRlbWVudHM6IFN0YXRlbWVudFtdID0gW107XG4gICAgd2hpbGUgKCF0bi5za2lwKFRva2VuLkVORE9GRklMRSkpIHtcbiAgICAgIGxldCBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlci5wYXJzZVRvcExldmVsU3RhdGVtZW50KHRuKTtcbiAgICAgIGlmIChzdGF0ZW1lbnQpIHtcbiAgICAgICAgc3RhdGVtZW50cy5wdXNoKHN0YXRlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhcnNlci5za2lwU3RhdGVtZW50KHRuKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlbWVudHM7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VNZXRob2REZWNsYXJhdGlvbihzOiBzdHJpbmcsIHBhcmVudDogQ2xhc3NEZWNsYXJhdGlvbik6IE1ldGhvZERlY2xhcmF0aW9uIHtcbiAgICBsZXQgdG4gPSB0aGlzLmdldFRva2VuaXplcihzKTtcbiAgICBsZXQgcmVzID0gdGhpcy5wYXJzZXIucGFyc2VDbGFzc01lbWJlcih0biwgcGFyZW50KTtcbiAgICBpZiAocmVzID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBjbGFzcyBtZW1iZXI6ICdcIiArIHMgKyBcIidcIik7XG4gICAgfVxuICAgIGlmICghKHJlcyBpbnN0YW5jZW9mIE1ldGhvZERlY2xhcmF0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ1wiICsgcyArIFwiJyBpcyBub3QgYSBtZXRob2QgZGVjbGFyYXRpb25cIik7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cbiAgXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l4UmVsYXRpdmVQYXRoKGZyb206IHN0cmluZywgdG86IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHJlbGF0aXZlUGF0aCA9IHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pO1xuICByZXR1cm4gcmVsYXRpdmVQYXRoLnNwbGl0KHBhdGguc2VwKS5qb2luKHBhdGgucG9zaXguc2VwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvU3RyaW5nKG5vZGU6IE5vZGUpOiBzdHJpbmcge1xuICByZXR1cm4gQVNUQnVpbGRlci5idWlsZChub2RlKTtcbn1cbiJdfQ==