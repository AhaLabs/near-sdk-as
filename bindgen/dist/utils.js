"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTypeName = exports.toString = exports.getName = exports.makeSnakeCase = exports.posixRelativePath = void 0;
// @ts-ignore
let path = require("path");
const visitor_as_1 = require("visitor-as");
function posixRelativePath(from, to) {
    const relativePath = path.relative(from, to);
    return relativePath.split(path.sep).join(path.posix.sep);
}
exports.posixRelativePath = posixRelativePath;
const capitalPattern = /([a-z])([A-Z])/g;
const doubleCapital = /([A-Z])([A-Z][a-z])/g;
function makeSnakeCase(s) {
    return s
        .replace(capitalPattern, "$1_$2")
        .replace(doubleCapital, "$1_$2")
        .toLowerCase();
}
exports.makeSnakeCase = makeSnakeCase;
exports.getName = visitor_as_1.utils.getName;
exports.toString = visitor_as_1.utils.toString;
// export function getName(node: Node & {name: IdentifierExpression} | TypeNode): string {
//   if (node instanceof TypeNode || node instanceof ClassDeclaration || node instanceof InterfaceDeclaration){
//     return utils.className(node) {
//     }
//   }
// }
function getTypeName(type) {
    let _type = exports.getName(type);
    const OR_NULL = /\|.*null/;
    if (type.isNullable && !OR_NULL.test(_type)) {
        _type = `${_type} | null`;
    }
    return _type;
}
exports.getTypeName = getTypeName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsYUFBYTtBQUNiLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQiwyQ0FBbUM7QUFHbkMsU0FBZ0IsaUJBQWlCLENBQUMsSUFBWSxFQUFFLEVBQVU7SUFDeEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0MsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBSEQsOENBR0M7QUFFRCxNQUFNLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQztBQUN6QyxNQUFNLGFBQWEsR0FBRyxzQkFBc0IsQ0FBQztBQUU3QyxTQUFnQixhQUFhLENBQUMsQ0FBUztJQUNyQyxPQUFPLENBQUM7U0FDTCxPQUFPLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQztTQUNoQyxPQUFPLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQztTQUMvQixXQUFXLEVBQUUsQ0FBQztBQUNuQixDQUFDO0FBTEQsc0NBS0M7QUFFWSxRQUFBLE9BQU8sR0FBRyxrQkFBSyxDQUFDLE9BQU8sQ0FBQztBQUN4QixRQUFBLFFBQVEsR0FBRyxrQkFBSyxDQUFDLFFBQVEsQ0FBQztBQUV2QywwRkFBMEY7QUFFMUYsK0dBQStHO0FBQy9HLHFDQUFxQztBQUVyQyxRQUFRO0FBQ1IsTUFBTTtBQUVOLElBQUk7QUFFSixTQUFnQixXQUFXLENBQUMsSUFBYztJQUN4QyxJQUFJLEtBQUssR0FBRyxlQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDO0lBQzNCLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDM0MsS0FBSyxHQUFHLEdBQUcsS0FBSyxTQUFTLENBQUM7S0FDM0I7SUFDRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUM7QUFQRCxrQ0FPQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1pZ25vcmVcbmxldCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gXCJ2aXNpdG9yLWFzXCI7XG5pbXBvcnQgeyBDbGFzc0RlY2xhcmF0aW9uLCBJZGVudGlmaWVyRXhwcmVzc2lvbiwgSW50ZXJmYWNlRGVjbGFyYXRpb24sIFR5cGVOb2RlIH0gZnJvbSBcInZpc2l0b3ItYXMvYXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l4UmVsYXRpdmVQYXRoKGZyb206IHN0cmluZywgdG86IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHJlbGF0aXZlUGF0aCA9IHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pO1xuICByZXR1cm4gcmVsYXRpdmVQYXRoLnNwbGl0KHBhdGguc2VwKS5qb2luKHBhdGgucG9zaXguc2VwKTtcbn1cblxuY29uc3QgY2FwaXRhbFBhdHRlcm4gPSAvKFthLXpdKShbQS1aXSkvZztcbmNvbnN0IGRvdWJsZUNhcGl0YWwgPSAvKFtBLVpdKShbQS1aXVthLXpdKS9nO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVNuYWtlQ2FzZShzOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gc1xuICAgIC5yZXBsYWNlKGNhcGl0YWxQYXR0ZXJuLCBcIiQxXyQyXCIpXG4gICAgLnJlcGxhY2UoZG91YmxlQ2FwaXRhbCwgXCIkMV8kMlwiKVxuICAgIC50b0xvd2VyQ2FzZSgpO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0TmFtZSA9IHV0aWxzLmdldE5hbWU7XG5leHBvcnQgY29uc3QgdG9TdHJpbmcgPSB1dGlscy50b1N0cmluZztcblxuLy8gZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWUobm9kZTogTm9kZSAmIHtuYW1lOiBJZGVudGlmaWVyRXhwcmVzc2lvbn0gfCBUeXBlTm9kZSk6IHN0cmluZyB7XG5cbi8vICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBUeXBlTm9kZSB8fCBub2RlIGluc3RhbmNlb2YgQ2xhc3NEZWNsYXJhdGlvbiB8fCBub2RlIGluc3RhbmNlb2YgSW50ZXJmYWNlRGVjbGFyYXRpb24pe1xuLy8gICAgIHJldHVybiB1dGlscy5jbGFzc05hbWUobm9kZSkge1xuICAgICAgXG4vLyAgICAgfVxuLy8gICB9XG5cbi8vIH1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGVOYW1lKHR5cGU6IFR5cGVOb2RlKTogc3RyaW5nIHtcbiAgbGV0IF90eXBlID0gZ2V0TmFtZSh0eXBlKTtcbiAgY29uc3QgT1JfTlVMTCA9IC9cXHwuKm51bGwvO1xuICBpZiAodHlwZS5pc051bGxhYmxlICYmICFPUl9OVUxMLnRlc3QoX3R5cGUpKSB7XG4gICAgX3R5cGUgPSBgJHtfdHlwZX0gfCBudWxsYDtcbiAgfVxuICByZXR1cm4gX3R5cGVcbn0iXX0=